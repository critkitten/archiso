## vm.mmap_rnd_bits
## cat /proc/sys/vm/mmap_rnd_bits
## 32 = select number of bits to use to determine the random offset of base addres from mmap allocations
vm.mmap_rnd_bits=32

## kernel.yama.ptrace_scope
## cat /proc/sys/kernel/yama/ptrace_scope
## 0 = classic ptrace permissions 
## 1 = admin-only attach only processes with CAP_SYS_PTRACE may use ptrace with PTRACE_ATTACH
## 2 = no attach no process may use ptrace with PTRACE_ATTACH ATTENTION to restriced for most systems think systemd need it
kernel.yama.ptrace_scope=1

## kernel.perf_event_paranoid=2
## -1 = allow many events by all users ignore mlock limit
## 0 = Disallow ftrace function tracepoint by users without CAP_SYS_ADMIN
## 1 = Disallow CPU event access by user without CAP_SYS_ADMIN
## 2 = Disallow kernel profiling by users without CAP_SYS_ADMIN
kernel.perf_event_paranoid=2

## kernel.randomize_va_space
## 2 = randomize addresses of mmap base, heap, stack and VDSO pages
kernel.randomize_va_space=2

## kptr_restrict
## 0 = expose kernel addresses via /proc and other interfaces.
## 1 = expose kernel addresses only if CAP_SYSLOG and user/group ids are equal to real ids
## 2 = expose kernel addresses printed using %pK replaced with 0
kernel.kptr_restrict=2

## dev.tty.ldisc_autoload
## 0 = restrict loading of tty lines disciplines with TIOCSETD ioctl
## 1 = unrestrict loading of tty lines disciplines with TIOCSETD ioctl
dev.tty.ldisc_autoload=0

## kernel.dmesg_restrict
## 0 = restrict user access to dmesg
## 1 = unrestricted user access to dmesg
kernel.dmesg_restrict=1

## kernel.kexec_load_disabled
## 0 = enable loading kernel during runtime
## 1 = disable loading kernel during runtime
kernel.kexec_load_disabled=1

## kernel.sysrq
## cat /proc/sys/kernel/sysrq
## 0 = disable all functions of sysrq
## 1 = enable all functions of sysrq
## https://docs.kernel.org/admin-guide/sysrq.html for more bitmask of allowed sysrq functions and information.
kernel.sysrq=0

## kernel.unprivileged_userns_clone
## 0 = disable user namespaces for unprivileged users
## 1 = enable user namespaces for unprivileged users
kernel.unprivileged_userns_clone=0
## user.max_user_namespace
## 0 = disable user namespaces for all
## 128065 = enable X user namespaces for all
user.max_user_namespaces=0

## kernel.printk
## cat /proc/sys/kernel/printk
## prevent leaking information during boot
## current, default, minimum, boot-time-default log levels numbers
## 0 KERN_EMERG, 1 KERN_ALERT, 2 KERN_CRIT, 3 KERN_ERR, 4 KERN_WARNING, 5 KERN_NOTICE, 6 KERN_INFO, 7 KERN_DEBUG, c KERN_CONT
## https://www.kernel.org/doc/html/latest/core-api/printk-basics.html
## boot cmdline "quiet loglevel=0" should also be setup
kernel.printk=3 3 3 3

## fs.protected_symlinks
## 0 = symlink following is unrestricted and allow TOCToU races
## 1 = symlink following only when outside a sticky world-writable directory 
##     or when the uid/directory owner of the symlink match the symlink owner.
fs.protected_symlinks=1

## fs.protected_hardlinks
## 0 = hardlink creation is unrestricted and allow ToCToU races
## 1 = hardlink creation is restricted to owner of the source file and who have read/write access.
fs.protected_hardlinks=1

## fs.protected_fifos
## 0 = writing FIFOs is unrestricted
## 1 = restrict opening FIFOs via O_CREAT to only directorys we own in world writable sticky directory
## 2 = restrict opening FIFOs via O_CREAT to only directorys we and group own in world writable sticky directory
## https://patchwork.kernel.org/project/linux-fsdevel/patch/1519729200-16056-1-git-send-email-s.mesoraca16@gmail.com/#21716159
fs.protected_fifos=2

## fs.protected_regular
## 0 = writing to regular files is unrestricted
## 1 = restrict opening regular files via O_CREAT to only directorys we own in world writable sticky directory
## 2 = restrict opening regular files via O_CREAT to only directorys we and group own in world writable sticky directory
## https://patchwork.kernel.org/project/linux-fsdevel/patch/1519729200-16056-1-git-send-email-s.mesoraca16@gmail.com/#21716159
fs.protected_regular=2

## fs.suid_dumpable
## 0 = restrict dump core
## 1 = all processes dump core
## 2 = all processes dump core but only if core_patter sysctl is set to pipe or handler.
## https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-2451
fs.suid_dumpable=0

## fs.inotify.max_user_watches
## >1 = prevent insufficient inodes
## check with "df -h -i"
fs.inotify.max_user_watches=65536

## net.ipv4.icmp_echo_ignore_broadcasts
## 0 = allow 
## 1 = ignore ICMP broadcasts to avoid Smurf attacks
net.ipv4.icmp_echo_ignore_broadcasts=1

## net.ipv4.icmp_ignore_bogus_error_responses
## 0 = allow ICMP errors
## 1 = ignore bad ICMP errors
net.ipv4.icmp_ignore_bogus_error_responses=1

## net.ipv4.icmp_echo_ignore_all
## 0 = accept system answering ICMP echo requests
## 1 = prevent system from answering ICMP echo requests
net.ipv4.icmp_echo_ignore_all=0

## net.ipv4.conf.all.log_martians
## 0 = do not log packets with impossible addresses
## 1 = log packets with impossible addresses
net.ipv4.conf.all.log_martians=1
net.ipv4.conf.default.log_martians=1

## net.ipv4.tcp_syncookies
## 0 = unprotected from syn packet flooding but RFCs standard conform
## 1 = protect from syn packet flooding but violates RFCs standard.
net.ipv4.tcp_syncookies=1

## net.ipv4.conf.all.accept_redirects
## 0 = do not accept ICMP redirects to prevent MITM attacks
## 1 = allow ICMP redirects which allow MITM attacks
net.ipv4.conf.all.accept_redirects=0
net.ipv4.conf.default.accept_redirects=0

## 

## net.ipv4.conf.all.accept_source_route
## 0 = do not accept IP source route packets
## 1 = accept IP source route packets
net.ipv4.conf.all.accept_source_route=0
net.ipv4.conf.default.accept_source_route=0

## net.ipv4.conf.all.rp_filter
## 0 = Disable Source Address Verification
## 1 = Enable Source Address Verification to prevent some spoofing attacks
net.ipv4.conf.all.rp_filter=1
net.ipv4.conf.default.rp_filter=1

## net.ipv4.conf.all.secure_redirects
## 0 = accept ICMP redirects for all gateways
## 1 = accept ICMP redirects only for listend Gateways
net.ipv4.conf.all.secure_redirects=1
net.ipv4.conf.default.secure_redirects=1

## net.ipv4.conf.all.send_redirects
## 0 = prevent traffic between networks
## 1 = allow traffic between networks
net.ipv4.conf.all.send_redirects=0
net.ipv4.conf.default.send_redirects=0

## net.ipv4.ip_forward
## 0 = disable IP forwarding
## 1 = enable IP forwarding
## usefull if you use container with NAT or act like a router
net.ipv4.ip_forward=0

## net.ipv4.tcp_rfc1337
## 0 = No RFC conform but prevent TCP TIME_WAIT assassination
## 1 = RFC conform could TCP TIME_WAIT assassination
net.ipv4.tcp_rfc1337=1

## disable kernel core dumps
kernel.core_pattern=|/bin/false
